#include <bits/stdc++.h>
using namespace std;
// here we'll check if the number is already present in the row , column or sub grid
bool canWePlaceNum(int mat[][9], int i, int j, int n, int number)
{
    // checking for the row and the column
    for (int x = 0; x < n; x++)
    {
        if (mat[x][j] == number || mat[i][x] == number)
            return false;
    }
    // checking for the sub grid
    int rn = sqrt(n);
    int sx = (i / rn) * rn; // formula to get the start of the subgrid containing the cell i , j
    int sy = (j / rn) * rn;
    for (int x = sx; x < sx + rn; x++)
    {
        for (int y = sy; y < sy + rn; y++)
        {
            if (mat[x][y] == number)
                return false;
        }
    }
    return true;
}

bool sudokuSolver(int mat[][9], int i, int j, int n)
{
    // base case
    if (i == n)
    { // we have traversed the whole matrix
        // print the matrix
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                cout << mat[i][j] << " ";
            }
            cout << endl;
        }

        return true;
    }

    // when we have reached the row end
    if (j == n)
    {
        return sudokuSolver(mat, i + 1, 0, n);
    }
    // when we encounter an already filled cell
    if (mat[i][j] != 0)
    {
        return sudokuSolver(mat, i, j + 1, n);
    }

    // recursive case - we'll check the current cell with all the possible numbers
    for (int number = 1; number <= n; number++)
    {
        if (canWePlaceNum(mat, i, j, n, number))
        {
            mat[i][j] = number;
            bool sudokuAnswer = sudokuSolver(mat, i, j + 1, n);
            if (sudokuAnswer)
                return true;
        }
    }
    // backtracking step....
    // this is the case where we have tried all the possible numbers on that cell but it returns false
    // make it 0
    mat[i][j] = 0;
    return false;
}

int main()
{
    int mat[9][9] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                     {5, 2, 0, 0, 0, 0, 0, 0, 0},
                     {0, 8, 7, 0, 0, 0, 0, 3, 1},
                     {0, 0, 3, 0, 1, 0, 0, 8, 0},
                     {9, 0, 0, 8, 6, 3, 0, 0, 5},
                     {0, 5, 0, 0, 9, 0, 6, 0, 0},
                     {1, 3, 0, 0, 0, 0, 2, 5, 0},
                     {0, 0, 0, 0, 0, 0, 0, 7, 4},
                     {0, 0, 5, 2, 0, 6, 3, 0, 0}};

    int n = 9;
    bool ans = sudokuSolver(mat, 0, 0, n);
    if (ans)
        cout << " Sudoku solved!";
}
